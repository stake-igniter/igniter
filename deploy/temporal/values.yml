admintools:
  additionalEnv: []
  affinity: {}
  containerSecurityContext: {}
  enabled: true
  image:
    pullPolicy: IfNotPresent
    repository: temporalio/admin-tools
    # This version need to match the server.image.tag otherwise the schema will fail.
    tag: 1.27.2-tctl-1.18.2-cli-1.3.0
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget: {}
  podLabels: {}
  resources: {}
  securityContext: {}
  service:
    annotations: {}
    port: 22
    type: ClusterIP
  tolerations: []
debug: false
cassandra:
  enabled: false
elasticsearch:
  enabled: false
mysql:
  enabled: false
fullnameOverride: ""
grafana:
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - disableDeletion: false
          editable: true
          folder: ""
          name: default
          options:
            path: /var/lib/grafana/dashboards/default
          orgId: 1
          type: file
  dashboards:
    default:
      misc-advanced-visibility-specific-github:
        datasource: TemporalMetrics
        url: https://raw.githubusercontent.com/temporalio/dashboards/helm/misc/advanced-visibility-specific.json
      misc-clustermonitoring-kubernetes-github:
        datasource: TemporalMetrics
        url: https://raw.githubusercontent.com/temporalio/dashboards/helm/misc/clustermonitoring-kubernetes.json
      misc-frontend-service-specific-github:
        datasource: TemporalMetrics
        url: https://raw.githubusercontent.com/temporalio/dashboards/helm/misc/frontend-service-specific.json
      misc-history-service-specific-github:
        datasource: TemporalMetrics
        url: https://raw.githubusercontent.com/temporalio/dashboards/helm/misc/history-service-specific.json
      misc-matching-service-specific-github:
        datasource: TemporalMetrics
        url: https://raw.githubusercontent.com/temporalio/dashboards/helm/misc/matching-service-specific.json
      misc-worker-service-specific-github:
        datasource: TemporalMetrics
        url: https://raw.githubusercontent.com/temporalio/dashboards/helm/misc/worker-service-specific.json
      sdk-general-github:
        datasource: TemporalMetrics
        url: https://raw.githubusercontent.com/temporalio/dashboards/helm/sdk/sdk-general.json
      server-general-github:
        datasource: TemporalMetrics
        url: https://raw.githubusercontent.com/temporalio/dashboards/helm/server/server-general.json
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - access: proxy
          isDefault: true
          name: TemporalMetrics
          type: prometheus
          url: http://{{ .Release.Name }}-prometheus-server
  enabled: false
  rbac:
    create: false
    namespaced: true
    pspEnabled: false
  replicas: 1
  testFramework:
    enabled: false
imagePullSecrets: {}
nameOverride: ""
prometheus:
  enabled: false
  nodeExporter:
    enabled: false
schema:
  createDatabase:
    enabled: true
  setup:
    backoffLimit: 100
    enabled: true
  update:
    backoffLimit: 100
    enabled: true
  containerSecurityContext: {}
  resources: {}
  securityContext: {}
server:
  additionalEnv: []
  additionalVolumeMounts: []
  additionalVolumes: []
  affinity: {}
  config:
    logLevel: "debug,info"
    numHistoryShards: 512
    persistence:
      defaultStore: default
      visibilityStore: visibility
      additionalStores: {}
      default:
        driver: sql
        sql:
          database: temporal
          driver: postgres12
          secretName: "credentials"
          secretKey: "postgresql_pwd"
          host: postgres-rw.default.svc.cluster.local
          maxConnLifetime: 1h
          maxConns: 20
          port: 5432
          user: postgres
      visibility:
        driver: sql
        sql:
          database: temporal_visibility
          driver: postgres12
          host: postgres-rw.default.svc.cluster.local
          maxConnLifetime: 1h
          maxConns: 20
          secretName: "credentials"
          secretKey: "postgresql_pwd"
          port: 5432
          user: postgres
  enabled: true
  frontend:
    additionalEnv: []
    affinity: {}
    containerSecurityContext: {}
    ingress: {}
    metrics:
      annotations:
        enabled: false
      prometheus: {}
      serviceMonitor: {}
    nodeSelector: {}
    podAnnotations: {}
    podDisruptionBudget: {}
    podLabels: {}
    resources: {}
    service:
      annotations: {}
      httpPort: 7243
      port: 7233
      type: ClusterIP
    tolerations: []
    topologySpreadConstraints: []
  history:
    additionalEnv: []
    affinity: {}
    containerSecurityContext: {}
    metrics:
      annotations:
        enabled: false
      prometheus: {}
      serviceMonitor: {}
    nodeSelector: {}
    podAnnotations: {}
    podDisruptionBudget: {}
    podLabels: {}
    resources: {}
    service:
      port: 7234
    tolerations: []
    topologySpreadConstraints: []
  image:
    pullPolicy: IfNotPresent
    repository: temporalio/server
    tag: 1.27.2
  matching:
    additionalEnv: []
    affinity: {}
    containerSecurityContext: {}
    metrics:
      annotations:
        enabled: false
      prometheus: {}
      serviceMonitor: {}
    nodeSelector: {}
    podAnnotations: {}
    podDisruptionBudget: {}
    podLabels: {}
    resources: {}
    service:
      port: 7235
    tolerations: []
    topologySpreadConstraints: []
  metrics:
    annotations:
      enabled: false
    prometheus:
      timerType: histogram
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      interval: 30s
      metricRelabelings: []
    tags: {}
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  replicaCount: 1
  resources: {}
  secretAnnotations: {}
  secretLabels: {}
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  sidecarContainers: []
  tolerations: []
  worker:
    additionalEnv: []
    affinity: {}
    containerSecurityContext: {}
    metrics:
      annotations:
        enabled: true
      prometheus: {}
      serviceMonitor: {}
    nodeSelector: {}
    podAnnotations: {}
    podDisruptionBudget: {}
    podLabels: {}
    resources: {}
    service:
      port: 7239
    tolerations: []
    topologySpreadConstraints: []
serviceAccount:
  create: false
web:
  additionalEnv:
    - name: TEMPORAL_UI_PUBLIC_PATH
      value: /admin
  additionalVolumeMounts: []
  additionalVolumes: []
  affinity: {}
  containerSecurityContext: {}
  enabled: true
  image:
    pullPolicy: IfNotPresent
    repository: temporalio/ui
    tag: 2.30.3
  ingress:
    annotations:
      ingress.kubernetes.io/auth-secret: commons/ingress-credentials
      ingress.kubernetes.io/auth-type: basic-auth
    enabled: true
    labels:
      app: poktscan-temporal
    hosts:
      - temporal-internal.poktscan.com/admin
    tls:
      - hosts:
          - temporal-internal.poktscan.com
        secretName: poktscan-tls
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget: {}
  podLabels: {}
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    annotations: {}
    port: 8080
    type: ClusterIP
  tolerations: []
  topologySpreadConstraints: []
